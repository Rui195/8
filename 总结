Trie树基本性质：
1.结点本身不存完整单词；
2.从根结点到某一结点，路径上经过的字符连接起来，为该结点对应的字符串；
3.每个结点的所有子结点路径代表的字符都不相同。

Tire树的优点：
最大限度地减少无所谓的字符串比较，查询效率比哈希表高。

Tire树的核心思想：空间交换时间
  利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。

并查集
基本操作：
1.makeSet(s)：建立一个新的并查集，其中包含s个单元数集合。
2.unionSet(x,y): :把元素x和元素y所在的集合合并，要求x和y所在的集合不相交，如果相交则不合并。
3.find(x):找到元素x所在的集合的代表，该操作也可以用于判断两个元素是否位于同一一个集合，只要将它们各自的代表比较一下就可以了。

二叉树
1.中序（Pre-order）：根-左-右
2.中序（In-order）：左-根-右
3.后序（Post-order）：左-右-根


AVL
1.平衡二叉搜索树
2.每个结点村balance factor={-1，0，1
3.四种旋转操作
4.不足：结点需要存储额外信息。且调整次数频繁}


位运算
1.将x最右辺的n位清零: x &(~0<< n)

2.荻取x的第n位値(0或者1) : (x>>n)&13.荻取x的第n位的冪値: x&(1 <<n)

4.仅将第n位置カ1: x|(1 <<n)

5.仅將第n位置ヵ0: x&(~(1 << n))

6.将x最高位至第n位(含)清零: x&((1 <<n)-1)
